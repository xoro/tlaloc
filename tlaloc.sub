#!/bin/sh

# tlaloc script functions
# Copyright Timo Pallach <timo@pallach.de>, see LICENSE for details

print_usage() {
  echo "Usage: tlaloc.sh [--help]"
  echo "                 [--version]"
  echo "                 [--show-config]"
  echo "                 [--enable-debug]"
  echo "                 [--enable-vga]"

  echo "                 [--cleanup-directories]"
  echo "                 [--cleanup-base-directory]"
  echo "                 [--cleanup-package-directory]"
  echo "                 [--cleanup-binary-directory]"
  echo "                 [--cleanup-image-directory]"
  echo "                 [--cleanup-resflash-directory]"

  echo "                 [--openbsd-version <openbsd_version>]"
  echo "                 [--openbsd-arch <processor_architecture>]"
  echo "                 [--openbsd-url <openbsd_url>]"

  echo "                 [--package-directory <package_directory>]"
  echo "                 [--binary-directory <binary_directory>]"
  echo "                 [--base-directory <base_directory>]"
  echo "                 [--image-directory <image_directory>]"
  echo "                 [--resflash-directory <resflash_directory>]"

  echo "                 [--package-list <package_list>]"
  echo "                 [--binary-list <binary_list>]"

  echo "                 [--com0-speed <com0_speed>]"
  echo "                 [--image-size <image_size>]"
  echo "                 [--resflash-treeish <resflash_treeish>]"
  echo "                 [--resflash-source-url <resflash_source_url>]"
  echo ""
  echo "       --help:"
  echo "         display this help message"
  echo "       --version:"
  echo "         display this tools current version"
  echo "       --show-config:"
  echo "         display the configuration the image will be build with"
  echo "       --enable-debug:"
  echo "         displays more information during the execution of the script"
  echo "       --enable-vga:"
  echo "         the image will be build for a vga system, so we are ignoreing"
  echo "         the --com0-speed option"

  echo "       --cleanup-directories:"
  echo "         the base, package, binary, image and resflash directories"
  echo "         will be cleaned up (deleted) before creating the"
  echo "         new resfalsh image and filesystem"
  echo "       --cleanup-base-directory:"
  echo "         the base directory will be cleaned up (deleted) before"
  echo "         creating the new resfalsh image and filesystem"
  echo "       --cleanup-package-directory:"
  echo "         the package directory will be cleaned up (deleted) before"
  echo "         creating the new resfalsh image and filesystem"
  echo "       --cleanup-binary-directory:"
  echo "         the binary directory will be cleaned up (deleted) before"
  echo "         creating the new resfalsh image and filesystem"
  echo "       --cleanup-image-directory:"
  echo "         the image directory will be cleaned up (deleted) before"
  echo "         creating the new resfalsh image and filesystem"
  echo "       --cleanup-resflash-directory:"
  echo "         the resflash directory will be cleaned up (deleted) before"
  echo "         creating the new resfalsh image and filesystem"

  echo "       --openbsd-version:"
  echo "         OpenBSD version to be used to build the image"
  echo "           default is \"${DEFAULT_OPENBSD_VERSION}\""
  echo "       --openbsd-arch:"
  echo "         processor architecture to be used to build the image"
  echo "           default is \"${DEFAULT_OPENBSD_ARCH}\""
  echo "       --openbsd-url:"
  echo "         URL of the OpenBSD's base directory"
  echo "           default is \"${DEFAULT_OPENBSD_URL}\""

  echo "       --package-directory:"
  echo "         directory that contains the OpenBSD package files"
  echo "           default is \"${DEFAULT_PACKAGE_DIRECTORY}\""
  echo "       --binary-directory:"
  echo "         directory that contains the binary OpenBSD package files"
  echo "           default is \"${DEFAULT_BINARY_DIRECTORY}\""
  echo "       --base-directory:"
  echo "         directory that contains the openbsd base system"
  echo "           default is \"${DEFAULT_BASE_DIRECTORY}\""
  echo "       --image-directory:"
  echo "         directory that contains the final resflash"
  echo "         image and filesystem files"
  echo "           default is \"${DEFAULT_IMAGE_DIRECTORY}\""
  echo "       --resflash-directory:"
  echo "         directory that contains the resflash git repository"
  echo "           default is \"${DEFAULT_RESFLASH_DIRECTORY}\""

  echo "       --package-list:"
  echo "         blank seperated list of packages to be installed in the image"
  echo "           default is \"${DEFAULT_PACKAGE_LIST}\""
  echo "       --binary-list:"
  echo "         blank seperated list of binary packages to be used for"
  echo "         the base directory"
  echo "           default is \"${DEFAULT_BINARY_LIST}\""

  echo "       --com0-speed:"
  echo "         com0 console speed in baud"
  echo "           default is \"${DEFAULT_COM0_SPEED}\""
  echo "       --image-size:"
  echo "         size of the image to be created in MB"
  echo "           default is \"${DEFAULT_IMAGE_SIZE}\""
  echo "       --resflash-treeish:"
  echo "         resflash commit, tag or ref to be checked out to create"
  echo "         the image and the filesystem files"
  echo "           default is \"${DEFAULT_RESFLASH_TREEISH}\""
  echo "       --resflash-source-url:"
  echo "         resflash git repository source url to be checked out to create"
  echo "         the image and the filesystem files"
  echo "           default is \"${DEFAULT_RESFLASH_SOURCE_URL}\""
  echo ""
  exit 1
}

print_version() {
  echo "VERSION: ${TLALOC_VERSION}"
  exit 1
}

show_config() {
  debug "DEBUG" "Checking if the user wants only to show the current configuration."
  if [ "${show_config}" == "YES" ]; then
    echo "Command line switch          Variable name              Variable value"
    echo "============================ ========================== ====================="
    echo "--enable-debug               enable_debug               ${enable_debug}"
    echo "--enable-vga                 enable_vga                 ${enable_vga}"
    echo ""
    echo "--cleanup-directories        cleanup_directories        ${cleanup_directories}"
    echo "--cleanup-base-directory     cleanup_base_directory     ${cleanup_base_directory}"
    echo "--cleanup-package-directory  cleanup_package_directory  ${cleanup_package_directory}"
    echo "--cleanup-binary-directory   cleanup_binary_directory   ${cleanup_binary_directory}"
    echo "--cleanup-image-directory    cleanup_image_directory    ${cleanup_image_directory}"
    echo "--cleanup-resflash-directory cleanup_resflash_directory ${cleanup_resflash_directory}"
    echo ""
    echo "--openbsd-version            openbsd_version            ${openbsd_version}"
    echo "                             openbsd_version_short      ${openbsd_version_short}"
    echo "--openbsd-arch               openbsd_arch               ${openbsd_arch}"
    echo "--openbsd-url                openbsd_url                ${openbsd_url}"
    echo "                             openbsd_package_url        ${openbsd_package_url}"
    echo "                             openbsd_binary_url         ${openbsd_binary_url}"
    echo ""
    echo "--package-directory          package_directory          ${package_directory}"
    echo "--binary-directory           binary_directory           ${binary_directory}"
    echo "--base-directory             binary_directory           ${base_directory}"
    echo "--image-directory            image_directory            ${image_directory}"
    echo "--resflash-directory         resflash_directory         ${resflash_directory}"
    echo ""
    echo "--package-list               package_list               ${package_list}"
    echo "--binary-list                binary_list                ${binary_list}"
    echo ""
    echo "--com0-speed                 com0_speed                 ${com0_speed}"
    echo "--image-size                 image_size                 ${image_size}"
    echo "--resflash-treeish           resflash_treeish           ${resflash_treeish}"
    echo "--resflash-source-url        resflash_source_url        ${resflash_source_url}"
    echo ""
    echo "                             TLALOC_VERSION             ${TLALOC_VERSION}"
    echo "                             TLALOC_DIRECTORY           ${TLALOC_DIRECTORY}"
    exit 1
  fi
}

change_openbsd_version() {
  openbsd_version=${1}
  openbsd_version_short=`echo ${openbsd_version} | sed 's/\.//g'`
  openbsd_package_url=${openbsd_url}/${openbsd_version}/packages/${openbsd_arch}
  openbsd_binary_url=${openbsd_url}/${openbsd_version}/${openbsd_arch}
}

change_openbsd_arch() {
  openbsd_arch=${1}
  openbsd_package_url=${openbsd_url}/${openbsd_version}/packages/${openbsd_arch}
  openbsd_binary_url=${openbsd_url}/${openbsd_version}/${openbsd_arch}
}

debug() {
  if [ "${enable_debug}" == "YES" ]; then
    debug_date_time=`date "+%Y-%m-%d %H:%M:%S"`
    debug_level=${1}
    debug_message=${2}
    echo "${debug_date_time} ${debug_level}: ${debug_message}"
  fi
}

is_user_root() {
  debug "DEBUG" "Checking if the user executing the script is root."
  if [ $(id -u) -ne 0 ]; then
    debug "DEBUG" "The script is not run as root user."
    echo 'Please run the script as root user.'
    exit 1
  else
    debug "DEBUG" "The script is run as root user."
  fi
}

cleanup_working_directories() {
  debug "DEBUG" "Cleaning up working directories."
  if [ "${cleanup_directories}" == "YES" ]; then
    debug "DEBUG" "Deleting the following directories:"
    debug "DEBUG" "${base_directory} ${package_directory} ${binary_directory} \
                   ${image_directory} ${resflash_directory}"
    rm -rf ${base_directory} ${package_directory} ${binary_directory} \
           ${image_directory} ${resflash_directory}
  else
    debug "DEBUG" "The working directories are not cleaned up (deleted)."
  fi

  debug "DEBUG" "Cleaning up base directory."
  if [ "${cleanup_base_directory}" == "YES" ]; then
    debug "DEBUG" "Deleting the base directory"
    rm -rf ${base_directory}
  else
    debug "DEBUG" "The base directory is not cleaned up (deleted)."
  fi

  debug "DEBUG" "Cleaning up package directory."
  if [ "${cleanup_package_directory}" == "YES" ]; then
    debug "DEBUG" "Deleting the package directory"
    rm -rf ${package_directory}
  else
    debug "DEBUG" "The package directory is not cleaned up (deleted)."
  fi

  debug "DEBUG" "Cleaning up binary directory."
  if [ "${cleanup_binary_directory}" == "YES" ]; then
    debug "DEBUG" "Deleting the binary directory"
    rm -rf ${binary_directory}
  else
    debug "DEBUG" "The binary directory is not cleaned up (deleted)."
  fi

  debug "DEBUG" "Cleaning up image directory."
  if [ "${cleanup_image_directory}" == "YES" ]; then
    debug "DEBUG" "Deleting the image directory"
    rm -rf ${image_directory}
  else
    debug "DEBUG" "The image directory is not cleaned up (deleted)."
  fi

  debug "DEBUG" "Cleaning up resflash directory."
  if [ "${cleanup_resflash_directory}" == "YES" ]; then
    debug "DEBUG" "Deleting the resflash directory"
    rm -rf ${resflash_directory}
  else
    debug "DEBUG" "The resflash directory is not cleaned up (deleted)."
  fi
}

is_git_installed() {
  debug "DEBUG" "Checking if git is installed on the system."
  type git &> /dev/null
  if [ ${?} -ne 0 ]; then
    debug "DEBUG" "Git is not installed on the system."
    echo "Git is not installed on the system but it is required to get resflash."
    echo "Please install it using the following command:"
    echo "pkg_add git"
    exit 1
  else
    debug "DEBUG" "Git is installed on the system."
  fi
}

get_resflash() {
  debug "DEBUG" "Getting the resflash sources if the do not exist yet."
  if [ -d ${resflash_directory} ]; then
    debug "DEBUG" "The resflash directory does already exist, skipping cloning."
    return 0
  fi

  git clone ${resflash_source_url} ${resflash_directory}
  if [ ${?} -ne 0 ]; then
    echo "Getting resflash from \"${resflash_source_url}\" did not succeed!"
    echo "git clone returned \"${?}\"."
    echo "Exiting the script."
    exit 1
  else
    debug "DEBUG" "resflash was successfully cloned into ${resflash_directory}."
  fi
  # Check if the user wants to checkout a specific resflash commit, tag or ref.
  if [ "${resflash_treeish}" == "" ]; then
    debug "DEBUG" "Not checking out any specific commit so keep on using the master branch."
  else
    debug "DEBUG" "Checking out treeish with id \"${resflash_treeish}\"."
    cd ${resflash_directory}
    git checkout ${resflash_treeish}
    cd ${TLALOC_DIRECTORY}
  fi
}

get_packages() {
  debug "DEBUG" "Getting the OpenBSD packages."
  if [ "${package_list}" == "" ]; then
    debug "DEBUG" "The list of packages to be installed is empty. Skipping this step."
    return 0
  fi

  # Check if the package directory exists and create it if not.
  if [ ! -d ${package_directory} ]; then
    mkdir -p ${package_directory}
  fi

  # Loop through the list of packages to be downloaded and get them.
  for package in ${package_list} ; do
    package_filename=`PKG_PATH=${openbsd_package_url} pkg_info -f ${package} | grep tgz | rev | cut -d "/" -f 1 | rev`
    get_dependencies ${package_directory} ${package_filename}
  done
}

get_dependencies()
{
  # Make the following calls more readable,
  # so we are using some readable variablenames.
  package_file=${2}
  package_file_path=${1}/${2}
  package_info_file=${2}.info
  package_info_file_path=${1}/${package_info_file}
  download_dir=${1}

  #TODO: Check the files against the SHA256 hashes and restart the download if the SHA256's are not identicall.
  # Check if the package and package info files already exist
  if [ ! -f ${package_file_path} ] || [ ! -f ${package_info_file_path} ]; then
    # First we are getting the package info
    PKG_PATH=${openbsd_package_url} pkg_info -f ${package_file} > ${package_info_file_path}
    # Then we are greping the url from the package info file
    package_url=`grep tgz ${package_info_file_path} | rev | cut -d " " -f 1 | rev`
    # And now we download it.
    ftp -o ${package_file_path} ${package_url}
  else
    echo "The package ${package_file_path} does already exist."
  fi

  # Finaly we are checking for dependencies
  dependencies=`grep '@depend' ${package_info_file_path} | cut -f 3 -d ":"`
  for dependency in ${dependencies} ; do
    get_dependencies ${download_dir} ${dependency}.tgz
  done
}

get_binaries() {
  #TODO: Check the files against the SHA256 hashes and restart the download if the SHA256's are not identicall.
  # Exit if the binary list is empty
  if [ "${binary_list}" == "" ]; then
    echo "ERROR: no binary have been passed to be extracted or copied!"
    exit 1
  fi

  debug "DEBUG" "Downloading the OpenBSD binary files \"${binary_list}\" and putting them into " \
       "the directory \"${binary_directory}\""

  # Check if the directory for OpenBSD binary files exists and create it if not.
  if [ ! -f ${binary_directory} ]; then
    mkdir -p ${binary_directory}
  fi

  # Loop through the list of OpenBSD binary files and download them
  for binary in ${binary_list} ; do
    shortened_binary=` echo ${binary} | cut -c1-3`
    # Check if we have one of the kernel binaries starting with bsd*
    # or one of the *.tgz files.
    if [ ${shortened_binary} == "bsd" ]; then
      binary_name=${binary}
    else
      binary_name=${binary}${openbsd_version_short}.tgz
    fi
    # Only start the download if it has now yet been downloaded.
    if [ ! -f ${binary_directory}/${binary_name} ]; then
      echo "Downloading ${openbsd_binary_url}/${binary_name} into ${binary_directory}/${binary_name}"
      ftp -o ${binary_directory}/${binary_name} ${openbsd_binary_url}/${binary_name}
    else
      echo "The binary ${binary_directory}/${binary_name} does already exist."
    fi
  done
}

populate_base_directory() {
  # Exit if the binary list is empty
  if [ "${binary_list}" == "" ]; then
    echo "ERROR: no binary have been passed to be extracted or copied!"
    exit 1
  fi

  echo "Extracting the OpenBSD binary files \"${binary_list}\" from the directory " \
       "\"${binary_directory}\" into the base directory \"${base_directory}\""

  # First we are going to clean up the base directory from previous runs.
  rm -rf ${base_directory}

  # Check if the base directory exists and create it if not.
  if [ ! -f ${base_directory} ]; then
    mkdir -p ${base_directory}
  fi

  # Loop through the list of OpenBSD binary files
  # and extract them into the base directory
  for binary in ${binary_list} ; do
    shortened_binary=` echo ${binary} | cut -c1-3`
    # Check if we have one of the kernel binaries starting with bsd*.
    if [ ${shortened_binary} == "bsd" ]; then
      echo "Copying ${binary_directory}/${binary} to ${base_directory}/"
      cp ${binary_directory}/${binary} ${base_directory}/
    else
      echo "Extracting ${binary_directory}/${binary}${openbsd_version_short}.tgz to ${base_directory}/"
      tar zxfph ${binary_directory}/${binary}${openbsd_version_short}.tgz -C ${base_directory}
    fi
  done

  # We do not have to forget the sysmerge thing!!!!!
  tar xzpf ${base_directory}/var/sysmerge/etc.tgz -C ${base_directory}
}

do_base_modifications() {
  # We want to save the complete /etc and the /var before we reboot the system.
  echo "save_etc='.'" >> ${resflash_directory}/etc/resflash.conf
  echo "save_var='.'" >> ${resflash_directory}/etc/resflash.conf

  # We are sourcing the /etc/csh.cshrc in the /root/.cshrc because we cannot
  # modify and save any changes in the / filesystem, only in the /etc and /variables
  # filesystems.
  echo ". /etc/csh.cshrc" >> ${base_directory}/root/.cshrc

  # Disable services that we do not need on a router firmware (smtpd, sndiod).
  echo "smtpd_flags=NO" >> ${base_directory}/etc/rc.conf.local
  echo "sndiod_flags=NO" >> ${base_directory}/etc/rc.conf.local

  # The user of tlaloc has the posibility to do some additional modifications
  # to the base system by copying his own script tlaloc.modifications.sh into
  # the tlaloc root directory.
  if [ -f ./tlaloc.modifications.sh ]; then
    . ./tlaloc.modifications.sh
  fi
}

run_resflash() {
  debug "DEBUG" "Running the resflash script."
  # Check if the user wants to build a vga or com0 image.
  if [ "${enable_vga}" == "YES" ] || [ "${com0_speed}" == "" ]; then
    com0_option=""
  else
    com0_option="-s ${com0_speed}"
  fi
  # Check if we have packages in the package_directory, so we have to passed the path
  if [ ! -d ${package_directory} ] || [ "`ls ${package_directory}`" == "" ]; then
    package_directory_option=""
  else
    package_directory_option="-p ../${package_directory}"
  fi
  resflash_command="./build_resflash.sh ${package_directory_option} ${com0_option} ${image_size} ../${base_directory}"
  debug "DEBUG" "running: ${resflash_command}"
  cd ${resflash_directory}
  ${resflash_command}
  cd ${TLALOC_DIRECTORY}
}

move_image_files() {
  # Check if the image directory exists and create it if not.
  if [ ! -d ${image_directory} ]; then
    mkdir -p ${image_directory}
  fi
  mv ${resflash_directory}/resflash*.img ${resflash_directory}/resflash*.fs ${resflash_directory}/resflash*.sha512 ${image_directory}
}
